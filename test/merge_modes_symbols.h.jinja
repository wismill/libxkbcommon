// WARNING: This file was auto-generated by: {{ script }}
#include "evdev-scancodes.h"
#include <xkbcommon/xkbcommon.h>

#include "src/utils.h"
#include "test.h"

{%- macro key_seq(entry, type, level) -%}
        {% if entry[type].levels|length == 0 %}
        {{- entry.key.c }}, BOTH, XKB_KEY_NoSymbol{# -#}
        {% else %}
        {% if entry[type].levels[level].target_group < 2 %}
        {{- entry.key.c }}, BOTH, {{ entry[type].levels[level].keysyms_c -}}
        {% else %}
        {{- entry.key.c }}, DOWN, {{ entry[type].levels[level].keysyms_c }}, NEXT,
        {{ entry.key.c }}, UP, {{
            alt_keysym(entry[type].levels[level].target_group,
                       entry[type].levels[level].target_level + level).c
        -}}
        {% endif %}
        {% endif %}
{% endmacro %}

{% macro make_test(mode, ref, tests_group, compile_buffer) -%}
    {% set keymap_str = "keymap_" + tests_group.name.replace("-", "_") + "_" + mode -%}
    const char {{ keymap_str }}[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"{{symbols_file}}({{ tests_group.name }}_base)\"\n"
        "    {{ mode }} \"{{symbols_file}}({{ tests_group.name }}_new)\"\n"
        "    include \"{{symbols_file}}(group2):2+{{symbols_file}}(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: {{ tests_group.name }}, {{ mode }} ***\n");
    keymap = compile_buffer(ctx, {{ keymap_str }},
                            ARRAY_SIZE({{ keymap_str }}),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        {%- for entry in tests_group.tests +%}
        {% if is_not_comment(entry) %}
        {{ key_seq(entry, ref, 0) }}, {%- if entry[ref].levels|length > 1 %} NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        {{ key_seq(entry, ref, 1) }}, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L,
        {%- endif %}{%- if entry[ref].levels|length > 2 %} NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        {{ key_seq(entry, ref, 2) }}, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift,
        {%- endif %}{% if not loop.last %} NEXT,{% endif %}
        {% else %}
        // {{ entry -}}
        {% endif %}
        {% endfor %} FINISH
    ), "test_merge_modes: {{ tests_group.name }}, {{ mode }}\n");
    xkb_keymap_unref(keymap);
{%- endmacro %}

static void
{{ test_func }}(struct xkb_context *ctx,
{{ " "*(test_func|length + 1) }}test_compile_buffer_t compile_buffer, void* private)
{
    struct xkb_keymap *keymap;
    {% for tests_group in tests_groups %}
    {% if tests_group.tests %}

    /****************************************************************
     * Test group: {{ tests_group.name }}
     ****************************************************************/

    /* Mode: Default */
    {{ make_test("include", "override", tests_group, "compile_buffer") }}

    /* Mode: Augment */
    {{ make_test("augment", "augment", tests_group, "compile_buffer") }}

    /* Mode: Override */
    {{ make_test("override", "override", tests_group, "compile_buffer") }}

    /* Mode: Replace */
    {{ make_test("replace", "replace", tests_group, "compile_buffer") }}
    {% endif %}
    {% endfor %}
}
