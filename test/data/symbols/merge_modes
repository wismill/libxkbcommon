// WARNING: This file was auto-generated by: scripts/update-symbols-tests.py
xkb_symbols "keysyms-only_base" {
	key <I189> {  };
	key <I160> {  };
	key <I222> { symbols=[a] };
	key <I190> { symbols=[a] };
	key <AD03> { symbols=[a, A] };
	key <AD04> { symbols=[a, A, a] };
	key <AD05> { symbols=[NoSymbol, NoSymbol] };
	key <AD07> { symbols=[NoSymbol, NoSymbol] };
	key <AD08> { symbols=[NoSymbol, NoSymbol] };
	key <AD09> { symbols=[a, A] };
	key <AD11> { symbols=[a, A] };
	key <AD12> { symbols=[a, A] };
};

xkb_symbols "keysyms-only_new" {

	////// Trivial cases //////

	key <I189> {  };

	key <I160> { symbols=[Greek_alpha] };

	key <I222> {  };

	////// Same key //////

	key <I190> { symbols=[a] };

	////// Mismatch levels count //////

	key <AD03> { symbols=[Greek_alpha, Greek_ALPHA, Greek_alpha] };

	key <AD04> { symbols=[Greek_alpha, Greek_ALPHA] };

	////// Single keysyms -> single keysyms //////

	key <AD05> { symbols=[NoSymbol, NoSymbol] };

	key <AD07> { symbols=[NoSymbol, Greek_ALPHA] };

	key <AD08> { symbols=[Greek_alpha, Greek_ALPHA] };

	key <AD09> { symbols=[NoSymbol, NoSymbol] };

	key <AD11> { symbols=[NoSymbol, Greek_ALPHA] };

	key <AD12> { symbols=[Greek_alpha, Greek_ALPHA] };
};

xkb_symbols "keysyms-only_augment" {

	////// Trivial cases //////
	key <I189> {  };
	key <I160> { symbols=[Greek_alpha] };
	key <I222> { symbols=[a] };

	////// Same key //////
	key <I190> { symbols=[a] };

	////// Mismatch levels count //////
	key <AD03> { symbols=[a, A, Greek_alpha] };
	key <AD04> { symbols=[a, A, a] };

	////// Single keysyms -> single keysyms //////
	key <AD05> { symbols=[NoSymbol, NoSymbol] };
	key <AD07> { symbols=[NoSymbol, Greek_ALPHA] };
	key <AD08> { symbols=[Greek_alpha, Greek_ALPHA] };
	key <AD09> { symbols=[a, A] };
	key <AD11> { symbols=[a, A] };
	key <AD12> { symbols=[a, A] };
};


xkb_symbols "keysyms-only_override" {

	////// Trivial cases //////
	key <I189> {  };
	key <I160> { symbols=[Greek_alpha] };
	key <I222> { symbols=[a] };

	////// Same key //////
	key <I190> { symbols=[a] };

	////// Mismatch levels count //////
	key <AD03> { symbols=[Greek_alpha, Greek_ALPHA, Greek_alpha] };
	key <AD04> { symbols=[Greek_alpha, Greek_ALPHA, a] };

	////// Single keysyms -> single keysyms //////
	key <AD05> { symbols=[NoSymbol, NoSymbol] };
	key <AD07> { symbols=[NoSymbol, Greek_ALPHA] };
	key <AD08> { symbols=[Greek_alpha, Greek_ALPHA] };
	key <AD09> { symbols=[a, A] };
	key <AD11> { symbols=[a, Greek_ALPHA] };
	key <AD12> { symbols=[Greek_alpha, Greek_ALPHA] };
};


xkb_symbols "actions-only_base" {
	key <I189> {  };
	key <I160> {  };
	key <I222> { actions=[SetGroup(group=2)] };
	key <I190> { actions=[SetGroup(group=2)] };
	key <AD01> { actions=[NoAction(), SetGroup(group=2)] };
	key <AD02> { actions=[NoAction(), SetGroup(group=2), NoAction()] };
	key <AD03> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD04> { actions=[SetGroup(group=2), SetGroup(group=2), SetGroup(group=2)] };
	key <AD05> { actions=[NoAction(), NoAction()] };
	key <AD06> { actions=[NoAction(), NoAction()] };
	key <AD07> { actions=[NoAction(), NoAction()] };
	key <AD08> { actions=[NoAction(), NoAction()] };
	key <AD09> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD10> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD11> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD12> { actions=[SetGroup(group=2), SetGroup(group=2)] };
};

xkb_symbols "actions-only_new" {

	////// Trivial cases //////

	key <I189> {  };

	key <I160> { actions=[SetGroup(group=3)] };

	key <I222> {  };

	////// Same key //////

	key <I190> { actions=[SetGroup(group=2)] };

	////// Mismatch levels count //////

	key <AD01> { actions=[SetGroup(group=3), NoAction(), NoAction()] };

	key <AD02> { actions=[SetGroup(group=3), NoAction()] };

	key <AD03> { actions=[SetGroup(group=3), SetGroup(group=3), SetGroup(group=3)] };

	key <AD04> { actions=[SetGroup(group=3), SetGroup(group=3)] };

	////// Single keysyms -> single keysyms //////

	key <AD05> { actions=[NoAction(), NoAction()] };

	key <AD06> { actions=[SetGroup(group=3), NoAction()] };

	key <AD07> { actions=[NoAction(), SetGroup(group=3)] };

	key <AD08> { actions=[SetGroup(group=3), SetGroup(group=3)] };

	key <AD09> { actions=[NoAction(), NoAction()] };

	key <AD10> { actions=[SetGroup(group=3), NoAction()] };

	key <AD11> { actions=[NoAction(), SetGroup(group=3)] };

	key <AD12> { actions=[SetGroup(group=3), SetGroup(group=3)] };
};

xkb_symbols "actions-only_augment" {

	////// Trivial cases //////
	key <I189> {  };
	key <I160> { actions=[SetGroup(group=3)] };
	key <I222> { actions=[SetGroup(group=2)] };

	////// Same key //////
	key <I190> { actions=[SetGroup(group=2)] };

	////// Mismatch levels count //////
	key <AD01> { actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD02> { actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD03> { actions=[SetGroup(group=2), SetGroup(group=2), SetGroup(group=3)] };
	key <AD04> { actions=[SetGroup(group=2), SetGroup(group=2), SetGroup(group=2)] };

	////// Single keysyms -> single keysyms //////
	key <AD05> { actions=[NoAction(), NoAction()] };
	key <AD06> { actions=[SetGroup(group=3), NoAction()] };
	key <AD07> { actions=[NoAction(), SetGroup(group=3)] };
	key <AD08> { actions=[SetGroup(group=3), SetGroup(group=3)] };
	key <AD09> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD10> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD11> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD12> { actions=[SetGroup(group=2), SetGroup(group=2)] };
};


xkb_symbols "actions-only_override" {

	////// Trivial cases //////
	key <I189> {  };
	key <I160> { actions=[SetGroup(group=3)] };
	key <I222> { actions=[SetGroup(group=2)] };

	////// Same key //////
	key <I190> { actions=[SetGroup(group=2)] };

	////// Mismatch levels count //////
	key <AD01> { actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD02> { actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD03> { actions=[SetGroup(group=3), SetGroup(group=3), SetGroup(group=3)] };
	key <AD04> { actions=[SetGroup(group=3), SetGroup(group=3), SetGroup(group=2)] };

	////// Single keysyms -> single keysyms //////
	key <AD05> { actions=[NoAction(), NoAction()] };
	key <AD06> { actions=[SetGroup(group=3), NoAction()] };
	key <AD07> { actions=[NoAction(), SetGroup(group=3)] };
	key <AD08> { actions=[SetGroup(group=3), SetGroup(group=3)] };
	key <AD09> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD10> { actions=[SetGroup(group=3), SetGroup(group=2)] };
	key <AD11> { actions=[SetGroup(group=2), SetGroup(group=3)] };
	key <AD12> { actions=[SetGroup(group=3), SetGroup(group=3)] };
};


xkb_symbols "keysyms-and-actions_base" {
	key <I189> {  };
	key <I160> {  };
	key <I222> { symbols=[a], actions=[SetGroup(group=2)] };
	key <I190> { symbols=[a], actions=[SetGroup(group=2)] };
	key <AD01> { symbols=[NoSymbol, A], actions=[NoAction(), SetGroup(group=2)] };
	key <AD02> { symbols=[NoSymbol, A, NoSymbol], actions=[NoAction(), SetGroup(group=2), NoAction()] };
	key <AD03> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD04> { symbols=[a, A, a], actions=[SetGroup(group=2), SetGroup(group=2), SetGroup(group=2)] };
	key <AD05> { symbols=[NoSymbol, NoSymbol] };
	key <AD06> { symbols=[NoSymbol, NoSymbol] };
	key <AD07> { symbols=[NoSymbol, NoSymbol] };
	key <AD08> { symbols=[NoSymbol, NoSymbol] };
	key <AD09> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD10> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD11> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD12> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
};

xkb_symbols "keysyms-and-actions_new" {

	////// Trivial cases //////

	key <I189> {  };

	key <I160> { symbols=[Greek_alpha], actions=[SetGroup(group=3)] };

	key <I222> {  };

	////// Same key //////

	key <I190> { symbols=[a], actions=[SetGroup(group=2)] };

	////// Mismatch levels count //////

	key <AD01> { symbols=[Greek_alpha, NoSymbol, NoSymbol], actions=[SetGroup(group=3), NoAction(), NoAction()] };

	key <AD02> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };

	key <AD03> { symbols=[Greek_alpha, Greek_ALPHA, Greek_alpha], actions=[SetGroup(group=3), SetGroup(group=3), SetGroup(group=3)] };

	key <AD04> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };

	////// Single keysyms -> single keysyms //////

	key <AD05> { symbols=[NoSymbol, NoSymbol] };

	key <AD06> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };

	key <AD07> { symbols=[NoSymbol, Greek_ALPHA], actions=[NoAction(), SetGroup(group=3)] };

	key <AD08> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };

	key <AD09> { symbols=[NoSymbol, NoSymbol] };

	key <AD10> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };

	key <AD11> { symbols=[NoSymbol, Greek_ALPHA], actions=[NoAction(), SetGroup(group=3)] };

	key <AD12> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };
};

xkb_symbols "keysyms-and-actions_augment" {

	////// Trivial cases //////
	key <I189> {  };
	key <I160> { symbols=[Greek_alpha], actions=[SetGroup(group=3)] };
	key <I222> { symbols=[a], actions=[SetGroup(group=2)] };

	////// Same key //////
	key <I190> { symbols=[a], actions=[SetGroup(group=2)] };

	////// Mismatch levels count //////
	key <AD01> { symbols=[Greek_alpha, A, NoSymbol], actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD02> { symbols=[Greek_alpha, A, NoSymbol], actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD03> { symbols=[a, A, Greek_alpha], actions=[SetGroup(group=2), SetGroup(group=2), SetGroup(group=3)] };
	key <AD04> { symbols=[a, A, a], actions=[SetGroup(group=2), SetGroup(group=2), SetGroup(group=2)] };

	////// Single keysyms -> single keysyms //////
	key <AD05> { symbols=[NoSymbol, NoSymbol] };
	key <AD06> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };
	key <AD07> { symbols=[NoSymbol, Greek_ALPHA], actions=[NoAction(), SetGroup(group=3)] };
	key <AD08> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };
	key <AD09> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD10> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD11> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD12> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
};


xkb_symbols "keysyms-and-actions_override" {

	////// Trivial cases //////
	key <I189> {  };
	key <I160> { symbols=[Greek_alpha], actions=[SetGroup(group=3)] };
	key <I222> { symbols=[a], actions=[SetGroup(group=2)] };

	////// Same key //////
	key <I190> { symbols=[a], actions=[SetGroup(group=2)] };

	////// Mismatch levels count //////
	key <AD01> { symbols=[Greek_alpha, A, NoSymbol], actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD02> { symbols=[Greek_alpha, A, NoSymbol], actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD03> { symbols=[Greek_alpha, Greek_ALPHA, Greek_alpha], actions=[SetGroup(group=3), SetGroup(group=3), SetGroup(group=3)] };
	key <AD04> { symbols=[Greek_alpha, Greek_ALPHA, a], actions=[SetGroup(group=3), SetGroup(group=3), SetGroup(group=2)] };

	////// Single keysyms -> single keysyms //////
	key <AD05> { symbols=[NoSymbol, NoSymbol] };
	key <AD06> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };
	key <AD07> { symbols=[NoSymbol, Greek_ALPHA], actions=[NoAction(), SetGroup(group=3)] };
	key <AD08> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };
	key <AD09> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AD10> { symbols=[Greek_alpha, A], actions=[SetGroup(group=3), SetGroup(group=2)] };
	key <AD11> { symbols=[a, Greek_ALPHA], actions=[SetGroup(group=2), SetGroup(group=3)] };
	key <AD12> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };
};


xkb_symbols "keysyms-and-actions-extras_base" {
	key <TLDE> { symbols=[a, NoSymbol], actions=[NoAction(), SetGroup(group=2)] };
};

xkb_symbols "keysyms-and-actions-extras_new" {

	key <TLDE> { symbols=[NoSymbol, X], actions=[SetGroup(group=3), NoAction()] };
};

xkb_symbols "keysyms-and-actions-extras_augment" {
	key <TLDE> { symbols=[a, X], actions=[SetGroup(group=3), SetGroup(group=2)] };
};


xkb_symbols "keysyms-and-actions-extras_override" {
	key <TLDE> { symbols=[a, X], actions=[SetGroup(group=3), SetGroup(group=2)] };
};


xkb_symbols "group2" {
	key <AD01> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD02> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD03> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD04> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD05> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD06> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD07> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD08> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD09> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD10> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD11> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD12> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <I160> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <I189> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <I190> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <I222> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <TLDE> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
};

xkb_symbols "group3" {
	key <AD01> { [ch, Ch, c_h, C_h] };
	key <AD02> { [ch, Ch, c_h, C_h] };
	key <AD03> { [ch, Ch, c_h, C_h] };
	key <AD04> { [ch, Ch, c_h, C_h] };
	key <AD05> { [ch, Ch, c_h, C_h] };
	key <AD06> { [ch, Ch, c_h, C_h] };
	key <AD07> { [ch, Ch, c_h, C_h] };
	key <AD08> { [ch, Ch, c_h, C_h] };
	key <AD09> { [ch, Ch, c_h, C_h] };
	key <AD10> { [ch, Ch, c_h, C_h] };
	key <AD11> { [ch, Ch, c_h, C_h] };
	key <AD12> { [ch, Ch, c_h, C_h] };
	key <I160> { [ch, Ch, c_h, C_h] };
	key <I189> { [ch, Ch, c_h, C_h] };
	key <I190> { [ch, Ch, c_h, C_h] };
	key <I222> { [ch, Ch, c_h, C_h] };
	key <TLDE> { [ch, Ch, c_h, C_h] };
};
