// WARNING: This file was auto-generated by: scripts/update-symbols-tests.py
xkb_symbols "keysyms-only_base" {
	key <I190> { symbols=[a, {A, Y}] };
	key <AD01> { symbols=[NoSymbol, A] };
	key <AD02> { symbols=[NoSymbol, A, NoSymbol] };
	key <AD06> { symbols=[NoSymbol, NoSymbol] };
	key <AD10> { symbols=[a, A] };
	key <AC01> { symbols=[NoSymbol, NoSymbol] };
	key <AC02> { symbols=[NoSymbol, NoSymbol] };
	key <AC03> { symbols=[NoSymbol, NoSymbol] };
	key <AC04> { symbols=[NoSymbol, NoSymbol] };
	key <AC05> { symbols=[NoSymbol, NoSymbol] };
	key <AC06> { symbols=[NoSymbol, NoSymbol] };
	key <AC07> { symbols=[a, A] };
	key <AC08> { symbols=[a, A] };
	key <AC09> { symbols=[a, A] };
	key <AC10> { symbols=[a, A] };
	key <AC11> { symbols=[a, A] };
	key <AC12> { symbols=[a, A] };
	key <AB01> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol}] };
	key <AB02> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol}] };
	key <AB03> { symbols=[{NoSymbol, NoSymbol}, {A, Y}] };
	key <AB04> { symbols=[{a, NoSymbol}, {NoSymbol, B}] };
	key <AB05> { symbols=[{a, NoSymbol}, {NoSymbol, B}] };
	key <AB06> { symbols=[{a, y}, {A, Y}] };
	key <AB07> { symbols=[{a, y}, {X, B}] };
	key <AB08> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol, NoSymbol}] };
	key <AB09> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol, NoSymbol}] };
	key <AB10> { symbols=[{a, y}, {X, NoSymbol, A}] };
	key <AB11> { symbols=[{a, y}, {X, NoSymbol, A}] };
	key <TLDE> { symbols=[{NoSymbol, NoSymbol}, {A, Y}] };
	key <AE01> { symbols=[{NoSymbol, NoSymbol}, {A, Y}] };
	key <AE02> { symbols=[{a, NoSymbol}, {NoSymbol, B}] };
	key <AE03> { symbols=[{a, NoSymbol}, {NoSymbol, B}] };
	key <AE04> { symbols=[a] };
	key <AE05> { symbols=[{a, y}] };
	key <AE06> { symbols=[a, {A, Y}] };
};

xkb_symbols "keysyms-only_new" {

	////// Same key //////

	key <I190> { symbols=[a, {A, Y}] };

	////// Mismatch levels count //////

	key <AD01> { symbols=[Greek_alpha, NoSymbol, NoSymbol] };

	key <AD02> { symbols=[Greek_alpha, NoSymbol] };

	////// Single keysyms -> single keysyms //////

	key <AD06> { symbols=[Greek_alpha, NoSymbol] };

	key <AD10> { symbols=[Greek_alpha, NoSymbol] };

	////// Single keysyms -> multiple keysyms //////

	key <AC01> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol] };

	key <AC02> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, NoSymbol}] };

	key <AC03> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}] };

	key <AC04> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, NoSymbol}] };

	key <AC05> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}] };

	key <AC06> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };

	key <AC07> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol] };

	key <AC08> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, NoSymbol}] };

	key <AC09> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}] };

	key <AC10> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, NoSymbol}] };

	key <AC11> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}] };

	key <AC12> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };

	////// Multiple keysyms -> multiple keysyms //////

	key <AB01> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, Greek_UPSILON}] };

	key <AB02> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}] };

	key <AB03> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };

	key <AB04> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}] };

	key <AB05> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_XI, Greek_BETA}] };

	key <AB06> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, Greek_UPSILON}] };

	key <AB07> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}] };

	key <AB08> { symbols=[{NoSymbol, NoSymbol, NoSymbol}, {NoSymbol, NoSymbol}] };

	key <AB09> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}] };

	key <AB10> { symbols=[{NoSymbol, NoSymbol, NoSymbol}, {NoSymbol, NoSymbol}] };

	key <AB11> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}] };

	////// Multiple keysyms -> single keysyms //////

	key <TLDE> { symbols=[NoSymbol, NoSymbol] };

	key <AE01> { symbols=[Greek_alpha, Greek_ALPHA] };

	key <AE02> { symbols=[NoSymbol, NoSymbol] };

	key <AE03> { symbols=[Greek_alpha, Greek_ALPHA] };

	////// Mix //////

	key <AE04> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };

	key <AE05> { symbols=[{Greek_alpha, Greek_upsilon}, Greek_ALPHA] };

	key <AE06> { symbols=[{Greek_alpha, Greek_upsilon}, Greek_ALPHA] };
};

xkb_symbols "keysyms-only_augment" {

	////// Same key //////
	key <I190> { symbols=[a, {A, Y}] };

	////// Mismatch levels count //////
	key <AD01> { symbols=[Greek_alpha, A, NoSymbol] };
	key <AD02> { symbols=[Greek_alpha, A, NoSymbol] };

	////// Single keysyms -> single keysyms //////
	key <AD06> { symbols=[Greek_alpha, NoSymbol] };
	key <AD10> { symbols=[a, A] };

	////// Single keysyms -> multiple keysyms //////
	key <AC01> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol] };
	key <AC02> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol] };
	key <AC03> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}] };
	key <AC04> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}] };
	key <AC05> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}] };
	key <AC06> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };
	key <AC07> { symbols=[a, A] };
	key <AC08> { symbols=[a, A] };
	key <AC09> { symbols=[a, A] };
	key <AC10> { symbols=[a, A] };
	key <AC11> { symbols=[a, A] };
	key <AC12> { symbols=[a, A] };

	////// Multiple keysyms -> multiple keysyms //////
	key <AB01> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, Greek_UPSILON}] };
	key <AB02> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}] };
	key <AB03> { symbols=[{Greek_alpha, Greek_upsilon}, {A, Y}] };
	key <AB04> { symbols=[{a, NoSymbol}, {NoSymbol, B}] };
	key <AB05> { symbols=[{a, Greek_upsilon}, {Greek_XI, B}] };
	key <AB06> { symbols=[{a, y}, {A, Y}] };
	key <AB07> { symbols=[{a, y}, {X, B}] };
	key <AB08> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol, NoSymbol}] };
	key <AB09> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}] };
	key <AB10> { symbols=[{a, y}, {X, NoSymbol, A}] };
	key <AB11> { symbols=[{a, y}, {X, NoSymbol, A}] };

	////// Multiple keysyms -> single keysyms //////
	key <TLDE> { symbols=[{NoSymbol, NoSymbol}, {A, Y}] };
	key <AE01> { symbols=[Greek_alpha, {A, Y}] };
	key <AE02> { symbols=[{a, NoSymbol}, {NoSymbol, B}] };
	key <AE03> { symbols=[{a, NoSymbol}, {NoSymbol, B}] };

	////// Mix //////
	key <AE04> { symbols=[a, {Greek_ALPHA, Greek_UPSILON}] };
	key <AE05> { symbols=[{a, y}, Greek_ALPHA] };
	key <AE06> { symbols=[a, {A, Y}] };
};


xkb_symbols "keysyms-only_override" {

	////// Same key //////
	key <I190> { symbols=[a, {A, Y}] };

	////// Mismatch levels count //////
	key <AD01> { symbols=[Greek_alpha, A, NoSymbol] };
	key <AD02> { symbols=[Greek_alpha, A, NoSymbol] };

	////// Single keysyms -> single keysyms //////
	key <AD06> { symbols=[Greek_alpha, NoSymbol] };
	key <AD10> { symbols=[Greek_alpha, A] };

	////// Single keysyms -> multiple keysyms //////
	key <AC01> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol] };
	key <AC02> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol] };
	key <AC03> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}] };
	key <AC04> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}] };
	key <AC05> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}] };
	key <AC06> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };
	key <AC07> { symbols=[{Greek_alpha, NoSymbol}, A] };
	key <AC08> { symbols=[{Greek_alpha, NoSymbol}, A] };
	key <AC09> { symbols=[a, {Greek_ALPHA, NoSymbol}] };
	key <AC10> { symbols=[a, {Greek_ALPHA, NoSymbol}] };
	key <AC11> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}] };
	key <AC12> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };

	////// Multiple keysyms -> multiple keysyms //////
	key <AB01> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, Greek_UPSILON}] };
	key <AB02> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}] };
	key <AB03> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };
	key <AB04> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}] };
	key <AB05> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_XI, Greek_BETA}] };
	key <AB06> { symbols=[{a, y}, {Greek_ALPHA, Greek_UPSILON}] };
	key <AB07> { symbols=[{Greek_alpha, y}, {X, Greek_BETA}] };
	key <AB08> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol, NoSymbol}] };
	key <AB09> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}] };
	key <AB10> { symbols=[{a, y}, {X, NoSymbol, A}] };
	key <AB11> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}] };

	////// Multiple keysyms -> single keysyms //////
	key <TLDE> { symbols=[{NoSymbol, NoSymbol}, {A, Y}] };
	key <AE01> { symbols=[Greek_alpha, Greek_ALPHA] };
	key <AE02> { symbols=[{a, NoSymbol}, {NoSymbol, B}] };
	key <AE03> { symbols=[Greek_alpha, Greek_ALPHA] };

	////// Mix //////
	key <AE04> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}] };
	key <AE05> { symbols=[{Greek_alpha, Greek_upsilon}, Greek_ALPHA] };
	key <AE06> { symbols=[{Greek_alpha, Greek_upsilon}, Greek_ALPHA] };
};


xkb_symbols "actions-only_base" {
	key <I190> { actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AD01> { actions=[NoAction(), SetGroup(group=2)] };
	key <AD02> { actions=[NoAction(), SetGroup(group=2), NoAction()] };
	key <AD06> { actions=[NoAction(), NoAction()] };
	key <AD10> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC01> { actions=[NoAction(), NoAction()] };
	key <AC02> { actions=[NoAction(), NoAction()] };
	key <AC03> { actions=[NoAction(), NoAction()] };
	key <AC04> { actions=[NoAction(), NoAction()] };
	key <AC05> { actions=[NoAction(), NoAction()] };
	key <AC06> { actions=[NoAction(), NoAction()] };
	key <AC07> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC08> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC09> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC10> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC11> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC12> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AB01> { actions=[{NoAction(), NoAction()}, {NoAction(), NoAction()}] };
	key <AB02> { actions=[{NoAction(), NoAction()}, {NoAction(), NoAction()}] };
	key <AB03> { actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AB04> { actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AB05> { actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AB06> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AB07> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), SetGroup(group=2)}] };
	key <AB08> { actions=[{NoAction(), NoAction()}, {NoAction(), NoAction(), NoAction()}] };
	key <AB09> { actions=[{NoAction(), NoAction()}, {NoAction(), NoAction(), NoAction()}] };
	key <AB10> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };
	key <AB11> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };
	key <TLDE> { actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE01> { actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE02> { actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AE03> { actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AE04> { actions=[SetGroup(group=2)] };
	key <AE05> { actions=[{SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE06> { actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };
};

xkb_symbols "actions-only_new" {

	////// Same key //////

	key <I190> { actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Mismatch levels count //////

	key <AD01> { actions=[SetGroup(group=3), NoAction(), NoAction()] };

	key <AD02> { actions=[SetGroup(group=3), NoAction()] };

	////// Single keysyms -> single keysyms //////

	key <AD06> { actions=[SetGroup(group=3), NoAction()] };

	key <AD10> { actions=[SetGroup(group=3), NoAction()] };

	////// Single keysyms -> multiple keysyms //////

	key <AC01> { actions=[{SetGroup(group=3), NoAction()}, NoAction()] };

	key <AC02> { actions=[{SetGroup(group=3), NoAction()}, {NoAction(), NoAction()}] };

	key <AC03> { actions=[NoAction(), {SetGroup(group=3), NoAction()}] };

	key <AC04> { actions=[{NoAction(), NoAction()}, {SetGroup(group=3), NoAction()}] };

	key <AC05> { actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };

	key <AC06> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AC07> { actions=[{SetGroup(group=3), NoAction()}, NoAction()] };

	key <AC08> { actions=[{SetGroup(group=3), NoAction()}, {NoAction(), NoAction()}] };

	key <AC09> { actions=[NoAction(), {SetGroup(group=3), NoAction()}] };

	key <AC10> { actions=[{NoAction(), NoAction()}, {SetGroup(group=3), NoAction()}] };

	key <AC11> { actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };

	key <AC12> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	////// Multiple keysyms -> multiple keysyms //////

	key <AB01> { actions=[{NoAction(), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AB02> { actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };

	key <AB03> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AB04> { actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };

	key <AB05> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };

	key <AB06> { actions=[{NoAction(), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AB07> { actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };

	key <AB08> { actions=[{NoAction(), NoAction(), NoAction()}, {NoAction(), NoAction()}] };

	key <AB09> { actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };

	key <AB10> { actions=[{NoAction(), NoAction(), NoAction()}, {NoAction(), NoAction()}] };

	key <AB11> { actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };

	////// Multiple keysyms -> single keysyms //////

	key <TLDE> { actions=[NoAction(), NoAction()] };

	key <AE01> { actions=[SetGroup(group=3), SetGroup(group=3)] };

	key <AE02> { actions=[NoAction(), NoAction()] };

	key <AE03> { actions=[SetGroup(group=3), SetGroup(group=3)] };

	////// Mix //////

	key <AE04> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AE05> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };

	key <AE06> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };
};

xkb_symbols "actions-only_augment" {

	////// Same key //////
	key <I190> { actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Mismatch levels count //////
	key <AD01> { actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD02> { actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };

	////// Single keysyms -> single keysyms //////
	key <AD06> { actions=[SetGroup(group=3), NoAction()] };
	key <AD10> { actions=[SetGroup(group=2), SetGroup(group=2)] };

	////// Single keysyms -> multiple keysyms //////
	key <AC01> { actions=[{SetGroup(group=3), NoAction()}, NoAction()] };
	key <AC02> { actions=[{SetGroup(group=3), NoAction()}, NoAction()] };
	key <AC03> { actions=[NoAction(), {SetGroup(group=3), NoAction()}] };
	key <AC04> { actions=[NoAction(), {SetGroup(group=3), NoAction()}] };
	key <AC05> { actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };
	key <AC06> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AC07> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC08> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC09> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC10> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC11> { actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC12> { actions=[SetGroup(group=2), SetGroup(group=2)] };

	////// Multiple keysyms -> multiple keysyms //////
	key <AB01> { actions=[{NoAction(), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AB02> { actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };
	key <AB03> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AB04> { actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AB05> { actions=[{SetGroup(group=2), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=2)}] };
	key <AB06> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AB07> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), SetGroup(group=2)}] };
	key <AB08> { actions=[{NoAction(), NoAction()}, {NoAction(), NoAction(), NoAction()}] };
	key <AB09> { actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };
	key <AB10> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };
	key <AB11> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };

	////// Multiple keysyms -> single keysyms //////
	key <TLDE> { actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE01> { actions=[SetGroup(group=3), {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE02> { actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AE03> { actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };

	////// Mix //////
	key <AE04> { actions=[SetGroup(group=2), {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AE05> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, SetGroup(group=3)] };
	key <AE06> { actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };
};


xkb_symbols "actions-only_override" {

	////// Same key //////
	key <I190> { actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Mismatch levels count //////
	key <AD01> { actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD02> { actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };

	////// Single keysyms -> single keysyms //////
	key <AD06> { actions=[SetGroup(group=3), NoAction()] };
	key <AD10> { actions=[SetGroup(group=3), SetGroup(group=2)] };

	////// Single keysyms -> multiple keysyms //////
	key <AC01> { actions=[{SetGroup(group=3), NoAction()}, NoAction()] };
	key <AC02> { actions=[{SetGroup(group=3), NoAction()}, NoAction()] };
	key <AC03> { actions=[NoAction(), {SetGroup(group=3), NoAction()}] };
	key <AC04> { actions=[NoAction(), {SetGroup(group=3), NoAction()}] };
	key <AC05> { actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };
	key <AC06> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AC07> { actions=[{SetGroup(group=3), NoAction()}, SetGroup(group=2)] };
	key <AC08> { actions=[{SetGroup(group=3), NoAction()}, SetGroup(group=2)] };
	key <AC09> { actions=[SetGroup(group=2), {SetGroup(group=3), NoAction()}] };
	key <AC10> { actions=[SetGroup(group=2), {SetGroup(group=3), NoAction()}] };
	key <AC11> { actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };
	key <AC12> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	////// Multiple keysyms -> multiple keysyms //////
	key <AB01> { actions=[{NoAction(), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AB02> { actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };
	key <AB03> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AB04> { actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };
	key <AB05> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };
	key <AB06> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AB07> { actions=[{SetGroup(group=3), SetMods(mods=Control)}, {SetMods(mods=Control), SetGroup(group=3)}] };
	key <AB08> { actions=[{NoAction(), NoAction()}, {NoAction(), NoAction(), NoAction()}] };
	key <AB09> { actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };
	key <AB10> { actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };
	key <AB11> { actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };

	////// Multiple keysyms -> single keysyms //////
	key <TLDE> { actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE01> { actions=[SetGroup(group=3), SetGroup(group=3)] };
	key <AE02> { actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AE03> { actions=[SetGroup(group=3), SetGroup(group=3)] };

	////// Mix //////
	key <AE04> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AE05> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };
	key <AE06> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };
};


xkb_symbols "keysyms-and-actions_base" {
	key <I190> { symbols=[a, {A, Y}], actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AD01> { symbols=[NoSymbol, A], actions=[NoAction(), SetGroup(group=2)] };
	key <AD02> { symbols=[NoSymbol, A, NoSymbol], actions=[NoAction(), SetGroup(group=2), NoAction()] };
	key <AD06> { symbols=[NoSymbol, NoSymbol] };
	key <AD10> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC01> { symbols=[NoSymbol, NoSymbol] };
	key <AC02> { symbols=[NoSymbol, NoSymbol] };
	key <AC03> { symbols=[NoSymbol, NoSymbol] };
	key <AC04> { symbols=[NoSymbol, NoSymbol] };
	key <AC05> { symbols=[NoSymbol, NoSymbol] };
	key <AC06> { symbols=[NoSymbol, NoSymbol] };
	key <AC07> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC08> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC09> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC10> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC11> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC12> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AB01> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol}] };
	key <AB02> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol}] };
	key <AB03> { symbols=[{NoSymbol, NoSymbol}, {A, Y}], actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AB04> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AB05> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AB06> { symbols=[{a, y}, {A, Y}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AB07> { symbols=[{a, y}, {X, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), SetGroup(group=2)}] };
	key <AB08> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol, NoSymbol}] };
	key <AB09> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol, NoSymbol}] };
	key <AB10> { symbols=[{a, y}, {X, NoSymbol, A}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };
	key <AB11> { symbols=[{a, y}, {X, NoSymbol, A}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };
	key <TLDE> { symbols=[{NoSymbol, NoSymbol}, {A, Y}], actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE01> { symbols=[{NoSymbol, NoSymbol}, {A, Y}], actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE02> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AE03> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AE04> { symbols=[a], actions=[SetGroup(group=2)] };
	key <AE05> { symbols=[{a, y}], actions=[{SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE06> { symbols=[a, {A, Y}], actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };
};

xkb_symbols "keysyms-and-actions_new" {

	////// Same key //////

	key <I190> { symbols=[a, {A, Y}], actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Mismatch levels count //////

	key <AD01> { symbols=[Greek_alpha, NoSymbol, NoSymbol], actions=[SetGroup(group=3), NoAction(), NoAction()] };

	key <AD02> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };

	////// Single keysyms -> single keysyms //////

	key <AD06> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };

	key <AD10> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };

	////// Single keysyms -> multiple keysyms //////

	key <AC01> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol], actions=[{SetGroup(group=3), NoAction()}, NoAction()] };

	key <AC02> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, NoSymbol}], actions=[{SetGroup(group=3), NoAction()}, {NoAction(), NoAction()}] };

	key <AC03> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}], actions=[NoAction(), {SetGroup(group=3), NoAction()}] };

	key <AC04> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, NoSymbol}], actions=[{NoAction(), NoAction()}, {SetGroup(group=3), NoAction()}] };

	key <AC05> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}], actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };

	key <AC06> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AC07> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol], actions=[{SetGroup(group=3), NoAction()}, NoAction()] };

	key <AC08> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, NoSymbol}], actions=[{SetGroup(group=3), NoAction()}, {NoAction(), NoAction()}] };

	key <AC09> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}], actions=[NoAction(), {SetGroup(group=3), NoAction()}] };

	key <AC10> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, NoSymbol}], actions=[{NoAction(), NoAction()}, {SetGroup(group=3), NoAction()}] };

	key <AC11> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}], actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };

	key <AC12> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	////// Multiple keysyms -> multiple keysyms //////

	key <AB01> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, Greek_UPSILON}], actions=[{NoAction(), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AB02> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}], actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };

	key <AB03> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AB04> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}], actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };

	key <AB05> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_XI, Greek_BETA}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };

	key <AB06> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, Greek_UPSILON}], actions=[{NoAction(), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AB07> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}], actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };

	key <AB08> { symbols=[{NoSymbol, NoSymbol, NoSymbol}, {NoSymbol, NoSymbol}] };

	key <AB09> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}], actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };

	key <AB10> { symbols=[{NoSymbol, NoSymbol, NoSymbol}, {NoSymbol, NoSymbol}] };

	key <AB11> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}], actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };

	////// Multiple keysyms -> single keysyms //////

	key <TLDE> { symbols=[NoSymbol, NoSymbol] };

	key <AE01> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };

	key <AE02> { symbols=[NoSymbol, NoSymbol] };

	key <AE03> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };

	////// Mix //////

	key <AE04> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AE05> { symbols=[{Greek_alpha, Greek_upsilon}, Greek_ALPHA], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };

	key <AE06> { symbols=[{Greek_alpha, Greek_upsilon}, Greek_ALPHA], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };
};

xkb_symbols "keysyms-and-actions_augment" {

	////// Same key //////
	key <I190> { symbols=[a, {A, Y}], actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Mismatch levels count //////
	key <AD01> { symbols=[Greek_alpha, A, NoSymbol], actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD02> { symbols=[Greek_alpha, A, NoSymbol], actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };

	////// Single keysyms -> single keysyms //////
	key <AD06> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };
	key <AD10> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };

	////// Single keysyms -> multiple keysyms //////
	key <AC01> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol], actions=[{SetGroup(group=3), NoAction()}, NoAction()] };
	key <AC02> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol], actions=[{SetGroup(group=3), NoAction()}, NoAction()] };
	key <AC03> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}], actions=[NoAction(), {SetGroup(group=3), NoAction()}] };
	key <AC04> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}], actions=[NoAction(), {SetGroup(group=3), NoAction()}] };
	key <AC05> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}], actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };
	key <AC06> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AC07> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC08> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC09> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC10> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC11> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };
	key <AC12> { symbols=[a, A], actions=[SetGroup(group=2), SetGroup(group=2)] };

	////// Multiple keysyms -> multiple keysyms //////
	key <AB01> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, Greek_UPSILON}], actions=[{NoAction(), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AB02> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}], actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };
	key <AB03> { symbols=[{Greek_alpha, Greek_upsilon}, {A, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AB04> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AB05> { symbols=[{a, Greek_upsilon}, {Greek_XI, B}], actions=[{SetGroup(group=2), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=2)}] };
	key <AB06> { symbols=[{a, y}, {A, Y}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AB07> { symbols=[{a, y}, {X, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), SetGroup(group=2)}] };
	key <AB08> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol, NoSymbol}] };
	key <AB09> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}], actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };
	key <AB10> { symbols=[{a, y}, {X, NoSymbol, A}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };
	key <AB11> { symbols=[{a, y}, {X, NoSymbol, A}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };

	////// Multiple keysyms -> single keysyms //////
	key <TLDE> { symbols=[{NoSymbol, NoSymbol}, {A, Y}], actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE01> { symbols=[Greek_alpha, {A, Y}], actions=[SetGroup(group=3), {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE02> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AE03> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };

	////// Mix //////
	key <AE04> { symbols=[a, {Greek_ALPHA, Greek_UPSILON}], actions=[SetGroup(group=2), {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AE05> { symbols=[{a, y}, Greek_ALPHA], actions=[{SetGroup(group=2), SetMods(mods=Control)}, SetGroup(group=3)] };
	key <AE06> { symbols=[a, {A, Y}], actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };
};


xkb_symbols "keysyms-and-actions_override" {

	////// Same key //////
	key <I190> { symbols=[a, {A, Y}], actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Mismatch levels count //////
	key <AD01> { symbols=[Greek_alpha, A, NoSymbol], actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };
	key <AD02> { symbols=[Greek_alpha, A, NoSymbol], actions=[SetGroup(group=3), SetGroup(group=2), NoAction()] };

	////// Single keysyms -> single keysyms //////
	key <AD06> { symbols=[Greek_alpha, NoSymbol], actions=[SetGroup(group=3), NoAction()] };
	key <AD10> { symbols=[Greek_alpha, A], actions=[SetGroup(group=3), SetGroup(group=2)] };

	////// Single keysyms -> multiple keysyms //////
	key <AC01> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol], actions=[{SetGroup(group=3), NoAction()}, NoAction()] };
	key <AC02> { symbols=[{Greek_alpha, NoSymbol}, NoSymbol], actions=[{SetGroup(group=3), NoAction()}, NoAction()] };
	key <AC03> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}], actions=[NoAction(), {SetGroup(group=3), NoAction()}] };
	key <AC04> { symbols=[NoSymbol, {Greek_ALPHA, NoSymbol}], actions=[NoAction(), {SetGroup(group=3), NoAction()}] };
	key <AC05> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}], actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };
	key <AC06> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AC07> { symbols=[{Greek_alpha, NoSymbol}, A], actions=[{SetGroup(group=3), NoAction()}, SetGroup(group=2)] };
	key <AC08> { symbols=[{Greek_alpha, NoSymbol}, A], actions=[{SetGroup(group=3), NoAction()}, SetGroup(group=2)] };
	key <AC09> { symbols=[a, {Greek_ALPHA, NoSymbol}], actions=[SetGroup(group=2), {SetGroup(group=3), NoAction()}] };
	key <AC10> { symbols=[a, {Greek_ALPHA, NoSymbol}], actions=[SetGroup(group=2), {SetGroup(group=3), NoAction()}] };
	key <AC11> { symbols=[{Greek_alpha, NoSymbol}, {Greek_ALPHA, NoSymbol}], actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), NoAction()}] };
	key <AC12> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	////// Multiple keysyms -> multiple keysyms //////
	key <AB01> { symbols=[{NoSymbol, NoSymbol}, {Greek_ALPHA, Greek_UPSILON}], actions=[{NoAction(), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AB02> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}], actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };
	key <AB03> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AB04> { symbols=[{Greek_alpha, NoSymbol}, {NoSymbol, Greek_BETA}], actions=[{SetGroup(group=3), NoAction()}, {NoAction(), SetGroup(group=3)}] };
	key <AB05> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_XI, Greek_BETA}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };
	key <AB06> { symbols=[{a, y}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AB07> { symbols=[{Greek_alpha, y}, {X, Greek_BETA}], actions=[{SetGroup(group=3), SetMods(mods=Control)}, {SetMods(mods=Control), SetGroup(group=3)}] };
	key <AB08> { symbols=[{NoSymbol, NoSymbol}, {NoSymbol, NoSymbol, NoSymbol}] };
	key <AB09> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}], actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };
	key <AB10> { symbols=[{a, y}, {X, NoSymbol, A}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetMods(mods=Control), NoAction(), SetGroup(group=2)}] };
	key <AB11> { symbols=[{Greek_alpha, NoSymbol, Greek_xi}, {Greek_XI, Greek_BETA}], actions=[{SetGroup(group=3), NoAction(), SetMods(mods=Mod5)}, {SetMods(mods=Mod5), SetGroup(group=3)}] };

	////// Multiple keysyms -> single keysyms //////
	key <TLDE> { symbols=[{NoSymbol, NoSymbol}, {A, Y}], actions=[{NoAction(), NoAction()}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE01> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };
	key <AE02> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetGroup(group=2)}] };
	key <AE03> { symbols=[Greek_alpha, Greek_ALPHA], actions=[SetGroup(group=3), SetGroup(group=3)] };

	////// Mix //////
	key <AE04> { symbols=[{Greek_alpha, Greek_upsilon}, {Greek_ALPHA, Greek_UPSILON}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AE05> { symbols=[{Greek_alpha, Greek_upsilon}, Greek_ALPHA], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };
	key <AE06> { symbols=[{Greek_alpha, Greek_upsilon}, Greek_ALPHA], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };
};


xkb_symbols "keysyms-and-actions-extras_base" {
	key <AE01> { symbols=[a, NoSymbol], actions=[NoAction(), SetGroup(group=2)] };
	key <AE02> { symbols=[{a, b}, NoSymbol], actions=[NoAction(), {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE03> { symbols=[{a, b}, NoSymbol], actions=[NoAction(), {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE04> { symbols=[{a, NoSymbol}, NoSymbol], actions=[NoAction(), {SetGroup(group=2), NoAction()}] };
	key <AE05> { symbols=[{a, b}, NoSymbol], actions=[NoAction(), {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE06> { symbols=[{a, b}, {A, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE07> { symbols=[{a, NoSymbol}, {A, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), NoAction()}] };
	key <AE08> { symbols=[{a, b}, {NoSymbol, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), NoAction()}] };
	key <AE09> { symbols=[{a, NoSymbol}, {NoSymbol, B}], actions=[{SetGroup(group=2), NoAction()}, {NoAction(), SetMods(mods=Control)}] };
	key <AD01> { symbols=[a, {A, B}] };
	key <AD02> { actions=[SetGroup(group=3), {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AD03> { symbols=[a, {A, B}], actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AC01> { symbols=[A] };
};

xkb_symbols "keysyms-and-actions-extras_new" {

	key <AE01> { symbols=[NoSymbol, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, NoAction()] };

	////// Multiple keysyms/actions –> single //////

	key <AE02> { symbols=[NoSymbol, X], actions=[SetGroup(group=3), NoAction()] };

	////// Multiple keysyms/actions –> multiple (xor) //////

	key <AE03> { symbols=[NoSymbol, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, NoAction()] };

	////// Multiple keysyms/actions –> multiple (mix) //////

	key <AE04> { symbols=[{x, y}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AE05> { symbols=[{x, NoSymbol}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), NoAction()}] };

	////// Multiple (mix) –> multiple keysyms/actions //////

	key <AE06> { symbols=[{x, NoSymbol}, NoSymbol], actions=[NoAction(), {SetGroup(group=3), NoAction()}] };

	key <AE07> { symbols=[{x, y}, NoSymbol], actions=[NoAction(), {SetGroup(group=3), SetMods(mods=Mod5)}] };

	////// Multiple (mix) –> multiple (mix) //////

	key <AE08> { symbols=[{NoSymbol, y}, {X, Y}], actions=[{SetGroup(group=3), NoAction()}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	key <AE09> { symbols=[{NoSymbol, y}, {X, NoSymbol}], actions=[{NoAction(), SetMods(mods=Mod5)}, {SetGroup(group=3), NoAction()}] };

	////// Mismatch count with mix //////

	key <AD01> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };

	key <AD02> { symbols=[{A, B}, a] };

	key <AD03> { symbols=[{x, y}, X], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };

	////// Issue #564 //////

	key <AC01> { symbols=[{A, A}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}] };
};

xkb_symbols "keysyms-and-actions-extras_augment" {
	key <AE01> { symbols=[a, NoSymbol], actions=[NoAction(), SetGroup(group=2)] };

	////// Multiple keysyms/actions –> single //////
	key <AE02> { symbols=[{a, b}, NoSymbol], actions=[NoAction(), {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Multiple keysyms/actions –> multiple (xor) //////
	key <AE03> { symbols=[{a, b}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Multiple keysyms/actions –> multiple (mix) //////
	key <AE04> { symbols=[{a, y}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=2), SetMods(mods=Mod5)}] };
	key <AE05> { symbols=[{a, b}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Multiple (mix) –> multiple keysyms/actions //////
	key <AE06> { symbols=[{a, b}, {A, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), SetMods(mods=Control)}] };
	key <AE07> { symbols=[{a, y}, {A, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), SetMods(mods=Mod5)}] };

	////// Multiple (mix) –> multiple (mix) //////
	key <AE08> { symbols=[{a, b}, {X, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=2), SetMods(mods=Mod5)}] };
	key <AE09> { symbols=[{a, y}, {X, B}], actions=[{SetGroup(group=2), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Control)}] };

	////// Mismatch count with mix //////
	key <AD01> { symbols=[a, {A, B}] };
	key <AD02> { actions=[SetGroup(group=3), {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AD03> { symbols=[a, {A, B}], actions=[SetGroup(group=2), {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Issue #564 //////
	key <AC01> { symbols=[A] };
};


xkb_symbols "keysyms-and-actions-extras_override" {
	key <AE01> { symbols=[NoSymbol, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, NoAction()] };

	////// Multiple keysyms/actions –> single //////
	key <AE02> { symbols=[NoSymbol, X], actions=[SetGroup(group=3), NoAction()] };

	////// Multiple keysyms/actions –> multiple (xor) //////
	key <AE03> { symbols=[{a, b}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=2), SetMods(mods=Control)}] };

	////// Multiple keysyms/actions –> multiple (mix) //////
	key <AE04> { symbols=[{x, y}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AE05> { symbols=[{x, b}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Control)}] };

	////// Multiple (mix) –> multiple keysyms/actions //////
	key <AE06> { symbols=[{x, b}, {A, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=3), SetMods(mods=Control)}] };
	key <AE07> { symbols=[{x, y}, {A, B}], actions=[{SetGroup(group=2), SetMods(mods=Control)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };

	////// Multiple (mix) –> multiple (mix) //////
	key <AE08> { symbols=[{a, y}, {X, Y}], actions=[{SetGroup(group=3), SetMods(mods=Control)}, {SetGroup(group=3), SetMods(mods=Mod5)}] };
	key <AE09> { symbols=[{a, y}, {X, B}], actions=[{SetGroup(group=2), SetMods(mods=Mod5)}, {SetGroup(group=3), SetMods(mods=Control)}] };

	////// Mismatch count with mix //////
	key <AD01> { actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };
	key <AD02> { symbols=[{A, B}, a] };
	key <AD03> { symbols=[{x, y}, X], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}, SetGroup(group=3)] };

	////// Issue #564 //////
	key <AC01> { symbols=[{A, A}], actions=[{SetGroup(group=3), SetMods(mods=Mod5)}] };
};


xkb_symbols "group2" {
	key <AB01> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB02> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB03> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB04> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB05> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB06> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB07> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB08> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB09> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB10> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AB11> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC01> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC02> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC03> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC04> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC05> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC06> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC07> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC08> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC09> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC10> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC11> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AC12> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD01> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD02> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD03> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD06> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AD10> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE01> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE02> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE03> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE04> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE05> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE06> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE07> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE08> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <AE09> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <I190> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
	key <TLDE> { [Ukrainian_i, Ukrainian_I, Ukrainian_yi, Ukrainian_YI] };
};

xkb_symbols "group3" {
	key <AB01> { [ch, Ch, c_h, C_h] };
	key <AB02> { [ch, Ch, c_h, C_h] };
	key <AB03> { [ch, Ch, c_h, C_h] };
	key <AB04> { [ch, Ch, c_h, C_h] };
	key <AB05> { [ch, Ch, c_h, C_h] };
	key <AB06> { [ch, Ch, c_h, C_h] };
	key <AB07> { [ch, Ch, c_h, C_h] };
	key <AB08> { [ch, Ch, c_h, C_h] };
	key <AB09> { [ch, Ch, c_h, C_h] };
	key <AB10> { [ch, Ch, c_h, C_h] };
	key <AB11> { [ch, Ch, c_h, C_h] };
	key <AC01> { [ch, Ch, c_h, C_h] };
	key <AC02> { [ch, Ch, c_h, C_h] };
	key <AC03> { [ch, Ch, c_h, C_h] };
	key <AC04> { [ch, Ch, c_h, C_h] };
	key <AC05> { [ch, Ch, c_h, C_h] };
	key <AC06> { [ch, Ch, c_h, C_h] };
	key <AC07> { [ch, Ch, c_h, C_h] };
	key <AC08> { [ch, Ch, c_h, C_h] };
	key <AC09> { [ch, Ch, c_h, C_h] };
	key <AC10> { [ch, Ch, c_h, C_h] };
	key <AC11> { [ch, Ch, c_h, C_h] };
	key <AC12> { [ch, Ch, c_h, C_h] };
	key <AD01> { [ch, Ch, c_h, C_h] };
	key <AD02> { [ch, Ch, c_h, C_h] };
	key <AD03> { [ch, Ch, c_h, C_h] };
	key <AD06> { [ch, Ch, c_h, C_h] };
	key <AD10> { [ch, Ch, c_h, C_h] };
	key <AE01> { [ch, Ch, c_h, C_h] };
	key <AE02> { [ch, Ch, c_h, C_h] };
	key <AE03> { [ch, Ch, c_h, C_h] };
	key <AE04> { [ch, Ch, c_h, C_h] };
	key <AE05> { [ch, Ch, c_h, C_h] };
	key <AE06> { [ch, Ch, c_h, C_h] };
	key <AE07> { [ch, Ch, c_h, C_h] };
	key <AE08> { [ch, Ch, c_h, C_h] };
	key <AE09> { [ch, Ch, c_h, C_h] };
	key <I190> { [ch, Ch, c_h, C_h] };
	key <TLDE> { [ch, Ch, c_h, C_h] };
};
