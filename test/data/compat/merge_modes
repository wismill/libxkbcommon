// WARNING: This file was auto-generated by: scripts/update-merge-modes-tests.py
default xkb_compatibility "base" {

	virtual_modifiers NumLock;

	interpret.repeat= False;
	setMods.clearLocks= True;
	latchMods.clearLocks= True;
	latchMods.latchToLock= True;

	interpret Any + Any {
		action= SetMods(modifiers=modMapMods);
	};

	interpret Caps_Lock {
		action = LockMods(modifiers = Lock);
	};

	indicator "Caps Lock" {
	!allowExplicit;
	whichModState= Locked;
	modifiers= Lock;
	};

	indicator "Num Lock" {
	!allowExplicit;
	whichModState= Locked;
	modifiers= NumLock;
	};
};


xkb_compat "new" {
	virtual_modifiers NumLock;

	interpret.repeat= False;
	setMods.clearLocks= False; // Changed

	// Unchanged
	interpret Any + Any {
		action= SetMods(modifiers=modMapMods);
	};

	// Changed
	interpret Caps_Lock {
		action = LockMods(modifiers = NumLock);
	};

	 // Unchanged
	indicator "Caps Lock" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Lock;
	};

	// Changed
	indicator "Num Lock" {
		!allowExplicit;
		whichModState= Base;
		modifiers= Lock;
	};

	// New
	indicator "Kana" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Control;
	};
};

xkb_compat "new-default" {
	include "merge_modes(base)"

	virtual_modifiers NumLock;

	interpret.repeat= False;
	setMods.clearLocks= False; // Changed

	// Unchanged
	interpret Any + Any {
		action= SetMods(modifiers=modMapMods);
	};

	// Changed
	interpret Caps_Lock {
		action = LockMods(modifiers = NumLock);
	};

	 // Unchanged
	indicator "Caps Lock" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Lock;
	};

	// Changed
	indicator "Num Lock" {
		!allowExplicit;
		whichModState= Base;
		modifiers= Lock;
	};

	// New
	indicator "Kana" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Control;
	};
};

xkb_compat "new-augment" {
	include "merge_modes(base)"

	augment virtual_modifiers NumLock;

	augment interpret.repeat= False;
	augment setMods.clearLocks= False; // Changed

	// Unchanged
	augment interpret Any + Any {
		action= SetMods(modifiers=modMapMods);
	};

	// Changed
	augment interpret Caps_Lock {
		action = LockMods(modifiers = NumLock);
	};

	 // Unchanged
	augment indicator "Caps Lock" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Lock;
	};

	// Changed
	augment indicator "Num Lock" {
		!allowExplicit;
		whichModState= Base;
		modifiers= Lock;
	};

	// New
	augment indicator "Kana" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Control;
	};
};

xkb_compat "new-override" {
	include "merge_modes(base)"

	override virtual_modifiers NumLock;

	override interpret.repeat= False;
	override setMods.clearLocks= False; // Changed

	// Unchanged
	override interpret Any + Any {
		action= SetMods(modifiers=modMapMods);
	};

	// Changed
	override interpret Caps_Lock {
		action = LockMods(modifiers = NumLock);
	};

	 // Unchanged
	override indicator "Caps Lock" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Lock;
	};

	// Changed
	override indicator "Num Lock" {
		!allowExplicit;
		whichModState= Base;
		modifiers= Lock;
	};

	// New
	override indicator "Kana" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Control;
	};
};

xkb_compat "new-replace" {
	include "merge_modes(base)"

	replace virtual_modifiers NumLock;

	replace interpret.repeat= False;
	replace setMods.clearLocks= False; // Changed

	// Unchanged
	replace interpret Any + Any {
		action= SetMods(modifiers=modMapMods);
	};

	// Changed
	replace interpret Caps_Lock {
		action = LockMods(modifiers = NumLock);
	};

	 // Unchanged
	replace indicator "Caps Lock" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Lock;
	};

	// Changed
	replace indicator "Num Lock" {
		!allowExplicit;
		whichModState= Base;
		modifiers= Lock;
	};

	// New
	replace indicator "Kana" {
		!allowExplicit;
		whichModState= Locked;
		modifiers= Control;
	};
};


xkb_compat "default" {
	virtual_modifiers NumLock;

	interpret.repeat= False;
	setMods.clearLocks= False;
	interpret Caps_Lock+AnyOfOrNone(all) {
		action= LockMods(modifiers=NumLock);
	};
	interpret Any+AnyOf(all) {
		action= SetMods(modifiers=modMapMods);
	};
	indicator "Caps Lock" {
		whichModState= locked;
		modifiers= Lock;
	};
	indicator "Kana" {
		whichModState= locked;
		modifiers= Control;
	};
	indicator "Num Lock" {
		whichModState= base;
		modifiers= Lock;
	};
};

xkb_compat "augment" {
	virtual_modifiers NumLock;

	interpret.useModMapMods= AnyLevel;
	interpret.repeat= False;
	interpret Caps_Lock+AnyOfOrNone(all) {
		action= LockMods(modifiers=Lock);
	};
	interpret Any+AnyOf(all) {
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	indicator "Caps Lock" {
		whichModState= locked;
		modifiers= Lock;
	};
	indicator "Num Lock" {
		whichModState= locked;
		modifiers= NumLock;
	};
	indicator "Kana" {
		whichModState= locked;
		modifiers= Control;
	};
};

xkb_compat "override" {
	virtual_modifiers NumLock;

	interpret.repeat= False;
	setMods.clearLocks= False;
	interpret Caps_Lock+AnyOfOrNone(all) {
		action= LockMods(modifiers=NumLock);
	};
	interpret Any+AnyOf(all) {
		action= SetMods(modifiers=modMapMods);
	};
	indicator "Caps Lock" {
		whichModState= locked;
		modifiers= Lock;
	};
	indicator "Kana" {
		whichModState= locked;
		modifiers= Control;
	};
	indicator "Num Lock" {
		whichModState= base;
		modifiers= Lock;
	};
};

xkb_compat "replace" {
	virtual_modifiers NumLock;

	interpret.repeat= False;
	setMods.clearLocks= False;
	interpret Caps_Lock+AnyOfOrNone(all) {
		action= LockMods(modifiers=NumLock);
	};
	interpret Any+AnyOf(all) {
		action= SetMods(modifiers=modMapMods);
	};
	indicator "Caps Lock" {
		whichModState= locked;
		modifiers= Lock;
	};
	indicator "Kana" {
		whichModState= locked;
		modifiers= Control;
	};
	indicator "Num Lock" {
		whichModState= base;
		modifiers= Lock;
	};
};
