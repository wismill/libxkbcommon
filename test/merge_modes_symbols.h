// WARNING: This file was auto-generated by: scripts/update-symbols-tests.py
#include "evdev-scancodes.h"
#include <xkbcommon/xkbcommon.h>

#include "src/utils.h"
#include "test.h"

static void
test_symbols_merge_modes(struct xkb_context *ctx,
                         test_compile_buffer_t compile_buffer, void* private)
{
    struct xkb_keymap *keymap;

    /****************************************************************
     * Test group: keysyms-only
     ****************************************************************/

    /* Mode: Default */
    const char keymap_keysyms_only_include[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-only_base)\"\n"
        "    include \"merge_modes(keysyms-only_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-only, include ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_only_include,
                            ARRAY_SIZE(keymap_keysyms_only_include),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_QUESTION, BOTH, XKB_KEY_a, NEXT,
        // Same key
        KEY_REDO, BOTH, XKB_KEY_a, NEXT,
        // Mismatch levels count
        KEY_E, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, BOTH, XKB_KEY_a, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-only, include\n");
    xkb_keymap_unref(keymap);

    /* Mode: Augment */
    const char keymap_keysyms_only_augment[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-only_base)\"\n"
        "    augment \"merge_modes(keysyms-only_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-only, augment ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_only_augment,
                            ARRAY_SIZE(keymap_keysyms_only_augment),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_QUESTION, BOTH, XKB_KEY_a, NEXT,
        // Same key
        KEY_REDO, BOTH, XKB_KEY_a, NEXT,
        // Mismatch levels count
        KEY_E, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, BOTH, XKB_KEY_a, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-only, augment\n");
    xkb_keymap_unref(keymap);

    /* Mode: Override */
    const char keymap_keysyms_only_override[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-only_base)\"\n"
        "    override \"merge_modes(keysyms-only_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-only, override ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_only_override,
                            ARRAY_SIZE(keymap_keysyms_only_override),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_QUESTION, BOTH, XKB_KEY_a, NEXT,
        // Same key
        KEY_REDO, BOTH, XKB_KEY_a, NEXT,
        // Mismatch levels count
        KEY_E, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, BOTH, XKB_KEY_a, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-only, override\n");
    xkb_keymap_unref(keymap);

    /* Mode: Replace */
    const char keymap_keysyms_only_replace[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-only_base)\"\n"
        "    replace \"merge_modes(keysyms-only_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-only, replace ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_only_replace,
                            ARRAY_SIZE(keymap_keysyms_only_replace),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_QUESTION, BOTH, XKB_KEY_NoSymbol, NEXT,
        // Same key
        KEY_REDO, BOTH, XKB_KEY_a, NEXT,
        // Mismatch levels count
        KEY_E, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, BOTH, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-only, replace\n");
    xkb_keymap_unref(keymap);

    /****************************************************************
     * Test group: actions-only
     ****************************************************************/

    /* Mode: Default */
    const char keymap_actions_only_include[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(actions-only_base)\"\n"
        "    include \"merge_modes(actions-only_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: actions-only, include ***\n");
    keymap = compile_buffer(ctx, keymap_actions_only_include,
                            ARRAY_SIZE(keymap_actions_only_include),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, UP, XKB_KEY_ch, NEXT,
        KEY_QUESTION, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_QUESTION, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Same key
        KEY_REDO, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_REDO, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Mismatch levels count
        KEY_Q, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Q, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Q, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_W, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_W, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_c_h, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_yi, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_Y, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Y, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Y, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_U, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_I, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_I, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_P, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_P, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: actions-only, include\n");
    xkb_keymap_unref(keymap);

    /* Mode: Augment */
    const char keymap_actions_only_augment[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(actions-only_base)\"\n"
        "    augment \"merge_modes(actions-only_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: actions-only, augment ***\n");
    keymap = compile_buffer(ctx, keymap_actions_only_augment,
                            ARRAY_SIZE(keymap_actions_only_augment),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, UP, XKB_KEY_ch, NEXT,
        KEY_QUESTION, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_QUESTION, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Same key
        KEY_REDO, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_REDO, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Mismatch levels count
        KEY_Q, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Q, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Q, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_W, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_W, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_c_h, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_yi, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_Y, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Y, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Y, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_U, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_I, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_I, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_P, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_P, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: actions-only, augment\n");
    xkb_keymap_unref(keymap);

    /* Mode: Override */
    const char keymap_actions_only_override[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(actions-only_base)\"\n"
        "    override \"merge_modes(actions-only_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: actions-only, override ***\n");
    keymap = compile_buffer(ctx, keymap_actions_only_override,
                            ARRAY_SIZE(keymap_actions_only_override),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, UP, XKB_KEY_ch, NEXT,
        KEY_QUESTION, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_QUESTION, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Same key
        KEY_REDO, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_REDO, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Mismatch levels count
        KEY_Q, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Q, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Q, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_W, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_W, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_c_h, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_yi, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_Y, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Y, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Y, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_U, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_I, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_I, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_P, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_P, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: actions-only, override\n");
    xkb_keymap_unref(keymap);

    /* Mode: Replace */
    const char keymap_actions_only_replace[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(actions-only_base)\"\n"
        "    replace \"merge_modes(actions-only_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: actions-only, replace ***\n");
    keymap = compile_buffer(ctx, keymap_actions_only_replace,
                            ARRAY_SIZE(keymap_actions_only_replace),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, UP, XKB_KEY_ch, NEXT,
        KEY_QUESTION, BOTH, XKB_KEY_NoSymbol, NEXT,
        // Same key
        KEY_REDO, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_REDO, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Mismatch levels count
        KEY_Q, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Q, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_W, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_E, UP, XKB_KEY_c_h, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_R, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_Y, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_Y, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Y, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_U, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_I, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_I, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_P, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: actions-only, replace\n");
    xkb_keymap_unref(keymap);

    /****************************************************************
     * Test group: keysyms-and-actions
     ****************************************************************/

    /* Mode: Default */
    const char keymap_keysyms_and_actions_include[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-and-actions_base)\"\n"
        "    include \"merge_modes(keysyms-and-actions_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-and-actions, include ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_and_actions_include,
                            ARRAY_SIZE(keymap_keysyms_and_actions_include),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_COFFEE, UP, XKB_KEY_ch, NEXT,
        KEY_QUESTION, DOWN, XKB_KEY_a, NEXT,
        KEY_QUESTION, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Same key
        KEY_REDO, DOWN, XKB_KEY_a, NEXT,
        KEY_REDO, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Mismatch levels count
        KEY_Q, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_Q, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, DOWN, XKB_KEY_A, NEXT,
        KEY_Q, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_W, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, DOWN, XKB_KEY_A, NEXT,
        KEY_W, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_E, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_E, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_E, UP, XKB_KEY_c_h, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_R, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_R, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_a, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_yi, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_Y, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_Y, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Y, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_U, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_I, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_I, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_a, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_A, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_P, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_A, NEXT,
        KEY_P, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_a, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-and-actions, include\n");
    xkb_keymap_unref(keymap);

    /* Mode: Augment */
    const char keymap_keysyms_and_actions_augment[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-and-actions_base)\"\n"
        "    augment \"merge_modes(keysyms-and-actions_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-and-actions, augment ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_and_actions_augment,
                            ARRAY_SIZE(keymap_keysyms_and_actions_augment),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_COFFEE, UP, XKB_KEY_ch, NEXT,
        KEY_QUESTION, DOWN, XKB_KEY_a, NEXT,
        KEY_QUESTION, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Same key
        KEY_REDO, DOWN, XKB_KEY_a, NEXT,
        KEY_REDO, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Mismatch levels count
        KEY_Q, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_Q, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, DOWN, XKB_KEY_A, NEXT,
        KEY_Q, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_W, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, DOWN, XKB_KEY_A, NEXT,
        KEY_W, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_a, NEXT,
        KEY_E, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_A, NEXT,
        KEY_E, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_E, UP, XKB_KEY_c_h, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_a, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, DOWN, XKB_KEY_A, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_a, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_yi, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_Y, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_Y, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Y, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_U, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_I, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_I, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_a, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_A, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_a, NEXT,
        KEY_P, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_A, NEXT,
        KEY_P, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_a, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_A, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_a, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_A, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-and-actions, augment\n");
    xkb_keymap_unref(keymap);

    /* Mode: Override */
    const char keymap_keysyms_and_actions_override[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-and-actions_base)\"\n"
        "    override \"merge_modes(keysyms-and-actions_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-and-actions, override ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_and_actions_override,
                            ARRAY_SIZE(keymap_keysyms_and_actions_override),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_COFFEE, UP, XKB_KEY_ch, NEXT,
        KEY_QUESTION, DOWN, XKB_KEY_a, NEXT,
        KEY_QUESTION, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Same key
        KEY_REDO, DOWN, XKB_KEY_a, NEXT,
        KEY_REDO, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Mismatch levels count
        KEY_Q, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_Q, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, DOWN, XKB_KEY_A, NEXT,
        KEY_Q, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_W, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, DOWN, XKB_KEY_A, NEXT,
        KEY_W, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_E, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_E, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_E, UP, XKB_KEY_c_h, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_R, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_R, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_a, NEXT,
        KEY_R, UP, XKB_KEY_Ukrainian_yi, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_Y, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_Y, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Y, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_U, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_I, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_I, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_a, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, DOWN, XKB_KEY_A, NEXT,
        KEY_O, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_P, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_A, NEXT,
        KEY_P, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_a, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ukrainian_i, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-and-actions, override\n");
    xkb_keymap_unref(keymap);

    /* Mode: Replace */
    const char keymap_keysyms_and_actions_replace[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-and-actions_base)\"\n"
        "    replace \"merge_modes(keysyms-and-actions_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-and-actions, replace ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_and_actions_replace,
                            ARRAY_SIZE(keymap_keysyms_and_actions_replace),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Trivial cases
        KEY_NEW, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_COFFEE, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_COFFEE, UP, XKB_KEY_ch, NEXT,
        KEY_QUESTION, BOTH, XKB_KEY_NoSymbol, NEXT,
        // Same key
        KEY_REDO, DOWN, XKB_KEY_a, NEXT,
        KEY_REDO, UP, XKB_KEY_Ukrainian_i, NEXT,
        // Mismatch levels count
        KEY_Q, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_Q, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_Q, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_W, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_W, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_E, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_E, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTALT, DOWN, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_E, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_E, UP, XKB_KEY_c_h, NEXT,
        KEY_RIGHTALT, UP, XKB_KEY_ISO_Level3_Shift, NEXT,
        KEY_R, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_R, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_R, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_R, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        // Single keysyms -> single keysyms
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_T, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_Y, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_Y, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Y, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_U, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_U, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_U, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_I, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_I, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_I, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_O, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_P, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_P, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, BOTH, XKB_KEY_NoSymbol, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_LEFTBRACE, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_LEFTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_Greek_alpha, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_RIGHTBRACE, DOWN, XKB_KEY_Greek_ALPHA, NEXT,
        KEY_RIGHTBRACE, UP, XKB_KEY_Ch, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-and-actions, replace\n");
    xkb_keymap_unref(keymap);

    /****************************************************************
     * Test group: keysyms-and-actions-extras
     ****************************************************************/

    /* Mode: Default */
    const char keymap_keysyms_and_actions_extras_include[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-and-actions-extras_base)\"\n"
        "    include \"merge_modes(keysyms-and-actions-extras_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-and-actions-extras, include ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_and_actions_extras_include,
                            ARRAY_SIZE(keymap_keysyms_and_actions_extras_include),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        KEY_GRAVE, DOWN, XKB_KEY_a, NEXT,
        KEY_GRAVE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_GRAVE, DOWN, XKB_KEY_X, NEXT,
        KEY_GRAVE, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-and-actions-extras, include\n");
    xkb_keymap_unref(keymap);

    /* Mode: Augment */
    const char keymap_keysyms_and_actions_extras_augment[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-and-actions-extras_base)\"\n"
        "    augment \"merge_modes(keysyms-and-actions-extras_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-and-actions-extras, augment ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_and_actions_extras_augment,
                            ARRAY_SIZE(keymap_keysyms_and_actions_extras_augment),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        KEY_GRAVE, DOWN, XKB_KEY_a, NEXT,
        KEY_GRAVE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_GRAVE, DOWN, XKB_KEY_X, NEXT,
        KEY_GRAVE, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-and-actions-extras, augment\n");
    xkb_keymap_unref(keymap);

    /* Mode: Override */
    const char keymap_keysyms_and_actions_extras_override[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-and-actions-extras_base)\"\n"
        "    override \"merge_modes(keysyms-and-actions-extras_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-and-actions-extras, override ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_and_actions_extras_override,
                            ARRAY_SIZE(keymap_keysyms_and_actions_extras_override),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        KEY_GRAVE, DOWN, XKB_KEY_a, NEXT,
        KEY_GRAVE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_GRAVE, DOWN, XKB_KEY_X, NEXT,
        KEY_GRAVE, UP, XKB_KEY_Ukrainian_I, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-and-actions-extras, override\n");
    xkb_keymap_unref(keymap);

    /* Mode: Replace */
    const char keymap_keysyms_and_actions_extras_replace[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes(keysyms-and-actions-extras_base)\"\n"
        "    replace \"merge_modes(keysyms-and-actions-extras_new)\"\n"
        "    include \"merge_modes(group2):2+merge_modes(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-and-actions-extras, replace ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_and_actions_extras_replace,
                            ARRAY_SIZE(keymap_keysyms_and_actions_extras_replace),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        KEY_GRAVE, DOWN, XKB_KEY_NoSymbol, NEXT,
        KEY_GRAVE, UP, XKB_KEY_ch, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_GRAVE, BOTH, XKB_KEY_X, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-and-actions-extras, replace\n");
    xkb_keymap_unref(keymap);
}
