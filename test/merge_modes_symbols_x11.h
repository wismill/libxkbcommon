// WARNING: This file was auto-generated by: scripts/update-symbols-tests.py
#include "evdev-scancodes.h"
#include <xkbcommon/xkbcommon.h>

#include "src/utils.h"
#include "test.h"

static void
test_symbols_merge_modes_x11(struct xkb_context *ctx,
                             test_compile_buffer_t compile_buffer, void* private)
{
    struct xkb_keymap *keymap;

    /****************************************************************
     * Test group: keysyms-only
     ****************************************************************/

    /* Mode: Default */
    const char keymap_keysyms_only_include[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes_x11(keysyms-only_base)\"\n"
        "    include \"merge_modes_x11(keysyms-only_new)\"\n"
        "    include \"merge_modes_x11(group2):2+merge_modes_x11(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-only, include ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_only_include,
                            ARRAY_SIZE(keymap_keysyms_only_include),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Mismatch levels count
        KEY_Q, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_W, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        // Single keysyms -> single keysyms
        KEY_Y, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_P, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-only, include\n");
    xkb_keymap_unref(keymap);

    /* Mode: Augment */
    const char keymap_keysyms_only_augment[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes_x11(keysyms-only_base)\"\n"
        "    augment \"merge_modes_x11(keysyms-only_new)\"\n"
        "    include \"merge_modes_x11(group2):2+merge_modes_x11(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-only, augment ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_only_augment,
                            ARRAY_SIZE(keymap_keysyms_only_augment),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Mismatch levels count
        KEY_Q, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_W, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        // Single keysyms -> single keysyms
        KEY_Y, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_P, BOTH, XKB_KEY_a, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-only, augment\n");
    xkb_keymap_unref(keymap);

    /* Mode: Override */
    const char keymap_keysyms_only_override[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes_x11(keysyms-only_base)\"\n"
        "    override \"merge_modes_x11(keysyms-only_new)\"\n"
        "    include \"merge_modes_x11(group2):2+merge_modes_x11(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-only, override ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_only_override,
                            ARRAY_SIZE(keymap_keysyms_only_override),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Mismatch levels count
        KEY_Q, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_Q, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        KEY_W, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_W, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, NEXT,
        // Single keysyms -> single keysyms
        KEY_Y, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_P, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_LEFTSHIFT, DOWN, XKB_KEY_Shift_L, NEXT,
        KEY_P, BOTH, XKB_KEY_A, NEXT,
        KEY_LEFTSHIFT, UP, XKB_KEY_Shift_L, FINISH
    ), "test_merge_modes: keysyms-only, override\n");
    xkb_keymap_unref(keymap);

    /* Mode: Replace */
    const char keymap_keysyms_only_replace[] =
        "xkb_keymap {\n"
        "  xkb_keycodes { include \"evdev\" };\n"
        "  xkb_types { include \"basic+numpad+extra\" };\n"
        "  xkb_compat { include \"basic+iso9995\" };\n"
        "  xkb_symbols {\n"
        "    key <LFSH> { [Shift_L] };\n"
        "    key <RALT> { [ISO_Level3_Shift] };\n"
        "    modifier_map Shift { <LFSH> };\n"
        "    modifier_map Mod5 { <RALT> };\n"
        // NOTE: Separate statements so that *all* the merge modes *really* work.
        //       Using + and | separators downgrades `replace key` to `override/
        //       augment key`.
        "    include \"merge_modes_x11(keysyms-only_base)\"\n"
        "    replace \"merge_modes_x11(keysyms-only_new)\"\n"
        "    include \"merge_modes_x11(group2):2+merge_modes_x11(group3):3\"\n"
        "  };\n"
        "};";
    fprintf(stderr, "*** test_merge_modes: keysyms-only, replace ***\n");
    keymap = compile_buffer(ctx, keymap_keysyms_only_replace,
                            ARRAY_SIZE(keymap_keysyms_only_replace),
                            private);
    assert(keymap);
    assert_printf(test_key_seq(keymap,
        // Mismatch levels count
        KEY_Q, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_W, BOTH, XKB_KEY_Greek_alpha, NEXT,
        // Single keysyms -> single keysyms
        KEY_Y, BOTH, XKB_KEY_Greek_alpha, NEXT,
        KEY_P, BOTH, XKB_KEY_Greek_alpha, FINISH
    ), "test_merge_modes: keysyms-only, replace\n");
    xkb_keymap_unref(keymap);
}
